<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on nkga blog</title>
    <link>https://nkga.github.io/post/</link>
    <description>Recent content in Posts on nkga blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nkga.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GGDM - Combat Analysis Mod for Guild Wars 2</title>
      <link>https://nkga.github.io/post/ggdm---combat-analysis-mod-for-guild-wars-2/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nkga.github.io/post/ggdm---combat-analysis-mod-for-guild-wars-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../img/ggdm_dps_graph.png&#34; alt=&#34;GGDM DPS Graph Sample&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GGDM was an addon for &lt;a href=&#34;https://www.guildwars2.com/en/&#34;&gt;Guild Wars 2&lt;/a&gt; that
I developed and maintained from 2015 to 2018. It started off as a simple
tool to display personal DPS in the game, but its feature list grew:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real-time group and personal DPS analysis and logging&lt;/li&gt;
&lt;li&gt;GUI modifications overlays for healing and combat&lt;/li&gt;
&lt;li&gt;Automatic network updates and real-time reloading&lt;/li&gt;
&lt;li&gt;Build templates for swapping gear, traits and skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post walks through the development of these features and reverse
engineering of the game.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shinkai: A Subnautica Multiplayer Mod</title>
      <link>https://nkga.github.io/post/shinkai-a-subnautica-multiplayer-mod/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nkga.github.io/post/shinkai-a-subnautica-multiplayer-mod/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../img/subnautica_players.jpg&#34; alt=&#34;Subnautica Multiplayer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Shinkai (深海) is a multiplayer mod for
the game &lt;a href=&#34;https://store.steampowered.com/app/264710/Subnautica/&#34;&gt;Subnautica&lt;/a&gt;.
It is open source and available on &lt;a href=&#34;https://github.com/nkga/shinkai&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The mod was tested on the March update of the game (Update 84), but it seems to work
with the April build too. I have personally verified that the game was playable
from beginning to completion with 3 friends online, but there isn&amp;rsquo;t any forced limit.
As far as a feature list goes, most of the single player experience carries over
to multiplayer the way you would expect it to.&lt;/p&gt;

&lt;p&gt;Notes on development of the mod and its challenges follow below.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frame Pacing: Analysis of the Game Loop</title>
      <link>https://nkga.github.io/post/frame-pacing-analysis-of-the-game-loop/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nkga.github.io/post/frame-pacing-analysis-of-the-game-loop/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../img/msvc_frametime_analysis.png&#34; alt=&#34;Frame Pacing Analysis&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The graph above was generated from Visual Studio&amp;rsquo;s performance profiler on a custom
game engine. It illustrates the time taken to render each frame, in milliseconds.
From the 7282 frames that were rendered during this collection period, there were
only 36 that did not take exactly 16667μs (60FPS target framerate). Of these 36,
the largest difference was only 88μs.&lt;/p&gt;

&lt;p&gt;Frame pacing is the consistency of frame-times for rendered frames in your engine.
If you want your game to feel &amp;ldquo;smooth&amp;rdquo; or &amp;ldquo;fluid&amp;rdquo;, you should aim to have consistent
frame pacing like the graph above. In this article, I&amp;rsquo;ll be walking you through
the low level details that you can implement in your own engine.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Video Playback for Games with VP9</title>
      <link>https://nkga.github.io/post/video-playback-for-games-with-vp9/</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nkga.github.io/post/video-playback-for-games-with-vp9/</guid>
      <description>&lt;p&gt;When working on porting an older PC game to a modern version of Windows I
needed play its prerecorded videos in-game. Commercial engines (Unity, UE4)
include this functionality, and there are also standalone solutions
&lt;a href=&#34;www.radgametools.com/bink&#34;&gt;Bink&lt;/a&gt; that can work for a custom engine. I wasn&amp;rsquo;t
interested in licensing a commercial product, so I developed my own video player.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>